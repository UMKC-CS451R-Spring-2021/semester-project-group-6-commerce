// <auto-generated />
using System;
using Commerce_Bank.DataAccess.Model;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Commerce_Bank.DataAccess.Migrations
{
    [DbContext(typeof(CommerceBankAppContext))]
    partial class CommerceBankAppContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 64)
                .HasAnnotation("ProductVersion", "5.0.5");

            modelBuilder.Entity("Commerce_Bank.DataAccess.Model.Account_Type", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("ACCOUNT_TYPE");
                });

            modelBuilder.Entity("Commerce_Bank.DataAccess.Model.Bank_Activity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<decimal>("Balance")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool?>("IsDeposit")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsOpeningBalance")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<decimal>("TrasactionAmount")
                        .HasColumnType("decimal(65,30)");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.ToTable("BANK_ACTIVITY");
                });

            modelBuilder.Entity("Commerce_Bank.DataAccess.Model.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("AccountNo")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("Account_TypId")
                        .HasColumnType("int");

                    b.Property<int?>("Account_TypeId")
                        .HasColumnType("int");

                    b.Property<string>("Firstname")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Lastname")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("PhoneNo")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("Account_TypeId");

                    b.ToTable("PERSON");
                });

            modelBuilder.Entity("Commerce_Bank.DataAccess.Model.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Password")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.ToTable("USER");
                });

            modelBuilder.Entity("Commerce_Bank.DataAccess.Model.Bank_Activity", b =>
                {
                    b.HasOne("Commerce_Bank.DataAccess.Model.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("Commerce_Bank.DataAccess.Model.Person", b =>
                {
                    b.HasOne("Commerce_Bank.DataAccess.Model.Account_Type", "Account_Type")
                        .WithMany()
                        .HasForeignKey("Account_TypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Account_Type");
                });

            modelBuilder.Entity("Commerce_Bank.DataAccess.Model.User", b =>
                {
                    b.HasOne("Commerce_Bank.DataAccess.Model.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Person");
                });
#pragma warning restore 612, 618
        }
    }
}
